//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SystimeDataAcces.DataAccess
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SystimedbEntities : DbContext
    {
        public SystimedbEntities(String conectionstring)
             : base(conectionstring)
        {
            var type = typeof(System.Data.Entity.SqlServer.SqlProviderServices);
            if (type == null)
                throw new Exception("Do not remove, ensures static reference to System.Data.Entity.SqlServer");
        }
    
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<CatalogActions> CatalogActions { get; set; }
        public virtual DbSet<CatalogDefaultSubOperationByIdJobTitle> CatalogDefaultSubOperationByIdJobTitle { get; set; }
        public virtual DbSet<CatalogExternalJobsByDealer> CatalogExternalJobsByDealer { get; set; }
        public virtual DbSet<CatalogJobTitleByDealer> CatalogJobTitleByDealer { get; set; }
        public virtual DbSet<CatalogNotificationType> CatalogNotificationType { get; set; }
        public virtual DbSet<CatalogOperationsByDealer> CatalogOperationsByDealer { get; set; }
        public virtual DbSet<CatalogParts> CatalogParts { get; set; }
        public virtual DbSet<CatalogPermissions> CatalogPermissions { get; set; }
        public virtual DbSet<CatalogProviders> CatalogProviders { get; set; }
        public virtual DbSet<CatalogRoles> CatalogRoles { get; set; }
        public virtual DbSet<CatalogSubOperationByDealer> CatalogSubOperationByDealer { get; set; }
        public virtual DbSet<CatalogWorkLevel> CatalogWorkLevel { get; set; }
        public virtual DbSet<CloudCatalogCities> CloudCatalogCities { get; set; }
        public virtual DbSet<CloudCatalogCountries> CloudCatalogCountries { get; set; }
        public virtual DbSet<CloudCatalogCurrency> CloudCatalogCurrency { get; set; }
        public virtual DbSet<CloudCatalogDealerShops> CloudCatalogDealerShops { get; set; }
        public virtual DbSet<CloudCatalogInsuranceCompanies> CloudCatalogInsuranceCompanies { get; set; }
        public virtual DbSet<CloudCatalogLanguage> CloudCatalogLanguage { get; set; }
        public virtual DbSet<CloudCatalogOperations> CloudCatalogOperations { get; set; }
        public virtual DbSet<CloudCatalogSubOperations> CloudCatalogSubOperations { get; set; }
        public virtual DbSet<CloudCatalogUnits> CloudCatalogUnits { get; set; }
        public virtual DbSet<CloudCatalogUnitTypes> CloudCatalogUnitTypes { get; set; }
        public virtual DbSet<CloudCatalogUrlBase> CloudCatalogUrlBase { get; set; }
        public virtual DbSet<CloudCatalogUrlPaths> CloudCatalogUrlPaths { get; set; }
        public virtual DbSet<CloudCatalogVehicleBrands> CloudCatalogVehicleBrands { get; set; }
        public virtual DbSet<CloudCatalogVehicleModels> CloudCatalogVehicleModels { get; set; }
        public virtual DbSet<CloudCatalogVehiclesServiceTypes> CloudCatalogVehiclesServiceTypes { get; set; }
        public virtual DbSet<CloudCatalogVehicleTypes> CloudCatalogVehicleTypes { get; set; }
        public virtual DbSet<Customers> Customers { get; set; }
        public virtual DbSet<JobsByWorkOrder> JobsByWorkOrder { get; set; }
        public virtual DbSet<JobTilteByWorker> JobTilteByWorker { get; set; }
        public virtual DbSet<LocalUrlPaths> LocalUrlPaths { get; set; }
        public virtual DbSet<Logs> Logs { get; set; }
        public virtual DbSet<MigrationAccessError> MigrationAccessError { get; set; }
        public virtual DbSet<NotificationErpErrors> NotificationErpErrors { get; set; }
        public virtual DbSet<NotificationLogs> NotificationLogs { get; set; }
        public virtual DbSet<OperationByWorkOrder> OperationByWorkOrder { get; set; }
        public virtual DbSet<PendingTask> PendingTask { get; set; }
        public virtual DbSet<ProgressByWorkOrder> ProgressByWorkOrder { get; set; }
        public virtual DbSet<ProvidersByExternalJob> ProvidersByExternalJob { get; set; }
        public virtual DbSet<QuoteDetails> QuoteDetails { get; set; }
        public virtual DbSet<QuoteRequest> QuoteRequest { get; set; }
        public virtual DbSet<Quotes> Quotes { get; set; }
        public virtual DbSet<ScheduleDetail> ScheduleDetail { get; set; }
        public virtual DbSet<Setting> Setting { get; set; }
        public virtual DbSet<ShopAppointments> ShopAppointments { get; set; }
        public virtual DbSet<SpecialDates> SpecialDates { get; set; }
        public virtual DbSet<SubOperationByWorkOrder> SubOperationByWorkOrder { get; set; }
        public virtual DbSet<TranslationReferences> TranslationReferences { get; set; }
        public virtual DbSet<Translations> Translations { get; set; }
        public virtual DbSet<UrlsBase> UrlsBase { get; set; }
        public virtual DbSet<UserPermissionByRole> UserPermissionByRole { get; set; }
        public virtual DbSet<Vehicles> Vehicles { get; set; }
        public virtual DbSet<WeekDays> WeekDays { get; set; }
        public virtual DbSet<Workers> Workers { get; set; }
        public virtual DbSet<WorkerShedule> WorkerShedule { get; set; }
        public virtual DbSet<WorkOrderDetails> WorkOrderDetails { get; set; }
        public virtual DbSet<WorkOrderLoadErrorLog> WorkOrderLoadErrorLog { get; set; }
        public virtual DbSet<WorkOrderNotificationByCustomer> WorkOrderNotificationByCustomer { get; set; }
        public virtual DbSet<WorkOrders> WorkOrders { get; set; }
        public virtual DbSet<WorkOrderTracking> WorkOrderTracking { get; set; }
        public virtual DbSet<WorkOrderTrackingDetail> WorkOrderTrackingDetail { get; set; }
        public virtual DbSet<Users> Users { get; set; }
    
        public virtual ObjectResult<string> AjustCity(string cityContain)
        {
            var cityContainParameter = cityContain != null ?
                new ObjectParameter("cityContain", cityContain) :
                new ObjectParameter("cityContain", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("AjustCity", cityContainParameter);
        }
    
        public virtual ObjectResult<string> AjustCountry(string idCountry, string contryContain)
        {
            var idCountryParameter = idCountry != null ?
                new ObjectParameter("idCountry", idCountry) :
                new ObjectParameter("idCountry", typeof(string));
    
            var contryContainParameter = contryContain != null ?
                new ObjectParameter("contryContain", contryContain) :
                new ObjectParameter("contryContain", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("AjustCountry", idCountryParameter, contryContainParameter);
        }
    
        public virtual ObjectResult<AjustVehicleBrands_Result> AjustVehicleBrands(string idBradVehicle)
        {
            var idBradVehicleParameter = idBradVehicle != null ?
                new ObjectParameter("idBradVehicle", idBradVehicle) :
                new ObjectParameter("idBradVehicle", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AjustVehicleBrands_Result>("AjustVehicleBrands", idBradVehicleParameter);
        }
    
        public virtual int FillterSystimeErp(string table, string @event, string jsonSend)
        {
            var tableParameter = table != null ?
                new ObjectParameter("table", table) :
                new ObjectParameter("table", typeof(string));
    
            var eventParameter = @event != null ?
                new ObjectParameter("event", @event) :
                new ObjectParameter("event", typeof(string));
    
            var jsonSendParameter = jsonSend != null ?
                new ObjectParameter("jsonSend", jsonSend) :
                new ObjectParameter("jsonSend", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FillterSystimeErp", tableParameter, eventParameter, jsonSendParameter);
        }
    
        public virtual ObjectResult<GET_PATH_Result> GET_PATH(string idPaht)
        {
            var idPahtParameter = idPaht != null ?
                new ObjectParameter("idPaht", idPaht) :
                new ObjectParameter("idPaht", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GET_PATH_Result>("GET_PATH", idPahtParameter);
        }
    }
}
