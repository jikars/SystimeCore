//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MigrateAccess.Systimedb
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SystimedbEntities : DbContext
    {
        public SystimedbEntities()
            : base("name=SystimedbEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<CatalogOperationsByDealer> CatalogOperationsByDealer { get; set; }
        public virtual DbSet<CatalogSubOperationByDealer> CatalogSubOperationByDealer { get; set; }
        public virtual DbSet<OperationByWorkOrder> OperationByWorkOrder { get; set; }
        public virtual DbSet<SubOperationByWorkOrder> SubOperationByWorkOrder { get; set; }
        public virtual DbSet<WorkOrders> WorkOrders { get; set; }
        public virtual DbSet<WorkOrderTracking> WorkOrderTracking { get; set; }
        public virtual DbSet<WorkOrderTrackingDetail> WorkOrderTrackingDetail { get; set; }
        public virtual DbSet<MigrationAccessError> MigrationAccessError { get; set; }
    
        public virtual ObjectResult<Nullable<decimal>> InsertNewTracking(string idWorkOrder, Nullable<int> idSubOperationByDealer, string idWorker, string idCurrentWorker, Nullable<bool> isWaiting, Nullable<bool> hasPhoto, string note, string user)
        {
            var idWorkOrderParameter = idWorkOrder != null ?
                new ObjectParameter("idWorkOrder", idWorkOrder) :
                new ObjectParameter("idWorkOrder", typeof(string));
    
            var idSubOperationByDealerParameter = idSubOperationByDealer.HasValue ?
                new ObjectParameter("idSubOperationByDealer", idSubOperationByDealer) :
                new ObjectParameter("idSubOperationByDealer", typeof(int));
    
            var idWorkerParameter = idWorker != null ?
                new ObjectParameter("idWorker", idWorker) :
                new ObjectParameter("idWorker", typeof(string));
    
            var idCurrentWorkerParameter = idCurrentWorker != null ?
                new ObjectParameter("idCurrentWorker", idCurrentWorker) :
                new ObjectParameter("idCurrentWorker", typeof(string));
    
            var isWaitingParameter = isWaiting.HasValue ?
                new ObjectParameter("isWaiting", isWaiting) :
                new ObjectParameter("isWaiting", typeof(bool));
    
            var hasPhotoParameter = hasPhoto.HasValue ?
                new ObjectParameter("hasPhoto", hasPhoto) :
                new ObjectParameter("hasPhoto", typeof(bool));
    
            var noteParameter = note != null ?
                new ObjectParameter("note", note) :
                new ObjectParameter("note", typeof(string));
    
            var userParameter = user != null ?
                new ObjectParameter("user", user) :
                new ObjectParameter("user", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("InsertNewTracking", idWorkOrderParameter, idSubOperationByDealerParameter, idWorkerParameter, idCurrentWorkerParameter, isWaitingParameter, hasPhotoParameter, noteParameter, userParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> InsertNewTrackingMigrate(string idWorkOrder, Nullable<int> idSubOperationByDealer, string idWorker, string idCurrentWorker, Nullable<bool> isWaiting, Nullable<bool> hasPhoto, string note, string user, Nullable<System.DateTime> inicializateAt, Nullable<System.DateTime> trakingDate)
        {
            var idWorkOrderParameter = idWorkOrder != null ?
                new ObjectParameter("idWorkOrder", idWorkOrder) :
                new ObjectParameter("idWorkOrder", typeof(string));
    
            var idSubOperationByDealerParameter = idSubOperationByDealer.HasValue ?
                new ObjectParameter("idSubOperationByDealer", idSubOperationByDealer) :
                new ObjectParameter("idSubOperationByDealer", typeof(int));
    
            var idWorkerParameter = idWorker != null ?
                new ObjectParameter("idWorker", idWorker) :
                new ObjectParameter("idWorker", typeof(string));
    
            var idCurrentWorkerParameter = idCurrentWorker != null ?
                new ObjectParameter("idCurrentWorker", idCurrentWorker) :
                new ObjectParameter("idCurrentWorker", typeof(string));
    
            var isWaitingParameter = isWaiting.HasValue ?
                new ObjectParameter("isWaiting", isWaiting) :
                new ObjectParameter("isWaiting", typeof(bool));
    
            var hasPhotoParameter = hasPhoto.HasValue ?
                new ObjectParameter("hasPhoto", hasPhoto) :
                new ObjectParameter("hasPhoto", typeof(bool));
    
            var noteParameter = note != null ?
                new ObjectParameter("note", note) :
                new ObjectParameter("note", typeof(string));
    
            var userParameter = user != null ?
                new ObjectParameter("user", user) :
                new ObjectParameter("user", typeof(string));
    
            var inicializateAtParameter = inicializateAt.HasValue ?
                new ObjectParameter("inicializateAt", inicializateAt) :
                new ObjectParameter("inicializateAt", typeof(System.DateTime));
    
            var trakingDateParameter = trakingDate.HasValue ?
                new ObjectParameter("trakingDate", trakingDate) :
                new ObjectParameter("trakingDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("InsertNewTrackingMigrate", idWorkOrderParameter, idSubOperationByDealerParameter, idWorkerParameter, idCurrentWorkerParameter, isWaitingParameter, hasPhotoParameter, noteParameter, userParameter, inicializateAtParameter, trakingDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SP_WCF_SetOperationByWorkOrder(Nullable<int> idOperationByDealer, Nullable<decimal> idWorkOrder, Nullable<double> estimatedTime, Nullable<double> workforceCost, Nullable<double> materialCost, string description, string createdOrUpdatedById)
        {
            var idOperationByDealerParameter = idOperationByDealer.HasValue ?
                new ObjectParameter("idOperationByDealer", idOperationByDealer) :
                new ObjectParameter("idOperationByDealer", typeof(int));
    
            var idWorkOrderParameter = idWorkOrder.HasValue ?
                new ObjectParameter("idWorkOrder", idWorkOrder) :
                new ObjectParameter("idWorkOrder", typeof(decimal));
    
            var estimatedTimeParameter = estimatedTime.HasValue ?
                new ObjectParameter("estimatedTime", estimatedTime) :
                new ObjectParameter("estimatedTime", typeof(double));
    
            var workforceCostParameter = workforceCost.HasValue ?
                new ObjectParameter("workforceCost", workforceCost) :
                new ObjectParameter("workforceCost", typeof(double));
    
            var materialCostParameter = materialCost.HasValue ?
                new ObjectParameter("materialCost", materialCost) :
                new ObjectParameter("materialCost", typeof(double));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var createdOrUpdatedByIdParameter = createdOrUpdatedById != null ?
                new ObjectParameter("CreatedOrUpdatedById", createdOrUpdatedById) :
                new ObjectParameter("CreatedOrUpdatedById", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SP_WCF_SetOperationByWorkOrder", idOperationByDealerParameter, idWorkOrderParameter, estimatedTimeParameter, workforceCostParameter, materialCostParameter, descriptionParameter, createdOrUpdatedByIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SP_WCF_SetSubOperationByWorkOrder(Nullable<int> idOperationByWorkOrder, Nullable<int> idSubOperationByDealer, string assignedTo, string assignedById, Nullable<double> operationTimePercentage, Nullable<double> workedTime, string createdOrUpdatedById, Nullable<bool> deleted)
        {
            var idOperationByWorkOrderParameter = idOperationByWorkOrder.HasValue ?
                new ObjectParameter("idOperationByWorkOrder", idOperationByWorkOrder) :
                new ObjectParameter("idOperationByWorkOrder", typeof(int));
    
            var idSubOperationByDealerParameter = idSubOperationByDealer.HasValue ?
                new ObjectParameter("idSubOperationByDealer", idSubOperationByDealer) :
                new ObjectParameter("idSubOperationByDealer", typeof(int));
    
            var assignedToParameter = assignedTo != null ?
                new ObjectParameter("AssignedTo", assignedTo) :
                new ObjectParameter("AssignedTo", typeof(string));
    
            var assignedByIdParameter = assignedById != null ?
                new ObjectParameter("AssignedById", assignedById) :
                new ObjectParameter("AssignedById", typeof(string));
    
            var operationTimePercentageParameter = operationTimePercentage.HasValue ?
                new ObjectParameter("OperationTimePercentage", operationTimePercentage) :
                new ObjectParameter("OperationTimePercentage", typeof(double));
    
            var workedTimeParameter = workedTime.HasValue ?
                new ObjectParameter("workedTime", workedTime) :
                new ObjectParameter("workedTime", typeof(double));
    
            var createdOrUpdatedByIdParameter = createdOrUpdatedById != null ?
                new ObjectParameter("CreatedOrUpdatedById", createdOrUpdatedById) :
                new ObjectParameter("CreatedOrUpdatedById", typeof(string));
    
            var deletedParameter = deleted.HasValue ?
                new ObjectParameter("deleted", deleted) :
                new ObjectParameter("deleted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SP_WCF_SetSubOperationByWorkOrder", idOperationByWorkOrderParameter, idSubOperationByDealerParameter, assignedToParameter, assignedByIdParameter, operationTimePercentageParameter, workedTimeParameter, createdOrUpdatedByIdParameter, deletedParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SP_WCF_SetSubOperationByWorkOrderMigrate(Nullable<int> idOperationByWorkOrder, Nullable<int> idSubOperationByDealer, string assignedTo, string assignedById, Nullable<double> operationTimePercentage, Nullable<double> workedTime, string createdOrUpdatedById, Nullable<System.DateTime> assinetAt)
        {
            var idOperationByWorkOrderParameter = idOperationByWorkOrder.HasValue ?
                new ObjectParameter("idOperationByWorkOrder", idOperationByWorkOrder) :
                new ObjectParameter("idOperationByWorkOrder", typeof(int));
    
            var idSubOperationByDealerParameter = idSubOperationByDealer.HasValue ?
                new ObjectParameter("idSubOperationByDealer", idSubOperationByDealer) :
                new ObjectParameter("idSubOperationByDealer", typeof(int));
    
            var assignedToParameter = assignedTo != null ?
                new ObjectParameter("AssignedTo", assignedTo) :
                new ObjectParameter("AssignedTo", typeof(string));
    
            var assignedByIdParameter = assignedById != null ?
                new ObjectParameter("AssignedById", assignedById) :
                new ObjectParameter("AssignedById", typeof(string));
    
            var operationTimePercentageParameter = operationTimePercentage.HasValue ?
                new ObjectParameter("OperationTimePercentage", operationTimePercentage) :
                new ObjectParameter("OperationTimePercentage", typeof(double));
    
            var workedTimeParameter = workedTime.HasValue ?
                new ObjectParameter("workedTime", workedTime) :
                new ObjectParameter("workedTime", typeof(double));
    
            var createdOrUpdatedByIdParameter = createdOrUpdatedById != null ?
                new ObjectParameter("CreatedOrUpdatedById", createdOrUpdatedById) :
                new ObjectParameter("CreatedOrUpdatedById", typeof(string));
    
            var assinetAtParameter = assinetAt.HasValue ?
                new ObjectParameter("AssinetAt", assinetAt) :
                new ObjectParameter("AssinetAt", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SP_WCF_SetSubOperationByWorkOrderMigrate", idOperationByWorkOrderParameter, idSubOperationByDealerParameter, assignedToParameter, assignedByIdParameter, operationTimePercentageParameter, workedTimeParameter, createdOrUpdatedByIdParameter, assinetAtParameter);
        }
    }
}
